#!/bin/sh

# Set up a fresh system with the minimum requirements for remote configuration
# with Ansible. Except for non-root Termux, start with root user.

set -e
github_user=${1:-'mu40'}


# System detection (`uname -r` no good for WSL).
for f in /bsd /etc/*-release /data/data/com.termux; do
    if [ -e "$f" ]; then
        os="$f"
        break
    fi
done


# Requirements.
case "$os" in
    /bsd)
        pkg_add -u
        pkg_add python3
    ;;
    /etc/arch-release)
        pacman --noconfirm -Syu
        pacman --noconfirm -S openssh python
    ;;
    /etc/alpine-release)
        apk -U upgrade
        apk add curl openssh python3
    ;;
    /etc/fedora-release)
        dnf -y upgrade
        dnf -y install openssh python3
    ;;
    /data/data/com.termux)
        pkg upgrade -y -o "Dpkg::Options::=--force-confnew"
        pkg install -y --no-install-recommends openssh python termux-services
    ;;
    *)
        echo "ERROR: system not supported"
        exit 1
    ;;
esac


# SSH public key.
d=~/.ssh
mkdir -p $d
curl -L "https://github.com/$github_user.keys" >$d/authorized_keys
chmod -R u=rwX,go= $d


# SSH root login. Termux hard-codes non-root user.
if [ "$os" != /data/data/com.termux ]; then
    f=/etc/ssh/sshd_config
    [ -f $f.bak ] || cp $f $f.bak
    sed 's/^#*\(PermitRootLogin\) [a-z-]*$/\1 prohibit-password/' $f.bak >$f
fi


# SSH daemon. Generate host keys if needed. Termux starts runit when sourcing
# $PREFIX/etc/profile.d/start-services.sh. Manually start it here to launch
# sshd without restarting Termux. Preferred over directly invoking `sshd` so
# Ansible's service module can control the daemon. Enable service, as it will
# only run while Termux is running, and aquire wake lock to ensure we can
# connect: release it with `termux-wake-unlock` or in the notification panel.
# Prompt restart at end, as `sv` will not work in current shell without it.
ssh-keygen -A
case "$os" in
    /bsd)
        rcctl restart sshd
    ;;
    /etc/arch-release|/etc/fedora-release)
        systemctl restart sshd
    ;;
    /etc/alpine-release)
        rc-service sshd restart
    ;;
    /data/data/com.termux)
        export SVDIR=$PREFIX/var/service
        export LOGDIR=$PREFIX/var/log
        service-daemon start || true
        sv-enable sshd
        termux-wake-lock
        trap 'echo "Press Enter to quit, then restart."; read -r; exit 0;' EXIT
    ;;
esac


# Username and IPs. Termux does not set $USER. Skip loopback device.
{
    echo "user: $(whoami)"
    if command -v ip >/dev/null; then
        ip a | awk '/^[^\t ]/ {f=$2} /inet / {sub(/\/.*/,"",$2); print f,$2}'
    else
        ifconfig 2>&1 | awk '/^[^\t ]/ {f=$1} /inet / {print f,$2}'
    fi
} | grep -v '^lo'
